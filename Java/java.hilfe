

package com.statefarm.sr.eda ;

public class Main {

   public static void main(String[] args) {
      stuff
   }
}

// create an array 
new ClassName[] {element1 , element} ;
new float[] {2.2 , 3.3, 4.4} ;
new char[] {"mom", "tommy", "george"} ;









// Make sure to encapsulate your class by using Accessors and Mutators, and setting fields to private
// Access Modifiers:  none      only within its own package (package private)       Classes    Members 
//                    public    can be used anywhere                                Classes    Members
//                    private   Only within its own class                           no         Members

public class ClassName {
   // place fields here
   private int  field1 ;                // note, can give dangerous behvior when overridden by inherited class
   private long field2 ;
   private char field3 ;
   private boolean[] isTrue ;                                      // Boolean array will have False as default 
   // Place your getX Accessors (getters)here
   public int  getField1() { return field1 ; }                     // Note CamelCase naming for the getter and setter
   public long getField2() { return field2 ; }
   public char getField3() { return field3 ; }
   // place your setX Mutators (setters) here
   public void setField1(int  field1) { this.field1=field1 ; }       // void since doesnt
   public void setField2(long field1) { this.field1=field1 ; }       // make sure to use this. do reduce ambiguity
   public void setField3(char field1) { this.field1=field1 ; }       // to use: > objectName.setField1( val ) 

   // Place any Initialization Blocks here to share across all constructors ... overrides need to chain
   {
      isTrue = new boolean[field1] ;            // if field1 is some sort of value to determine size of boolean array
      for (int i=0 ; i< field1 ; i++)
         isTrue[i] = true ;
   }

   // Recall Overloading... Constructors and Methods identified by signature={# Parameters, Type of parameters, Name(for methods)}
   // Make list of all overloaded methods and classes for better documentation
   // Remember that overloading will work if unspecified type can be expanded/widened into a specified type
   // http://bit.ly/javamethodselection

   // Style:  set a null Constructor instead of relying on Java (Java won't do it if there are multiple constructores)
   // A public constructor will allow the creation of an instance of the class (otherwise a class is just declared)
   public ClassName() {
   }
   
   // second constructor for more functionality.  Remember to use this. for clarification of native fields
   public ClassName(int arg1) {
   this.arg1 = passedval ;
   }

   // third constructor for further functionality
   public ClassName(int arg1, int arg2) {
   this(arg1) ;    // calls the previous constructor so that no need to duplicate (needs to be 1st line)
   this.arg12 = passdval2 ;
   }

   // not all constructors need to be public, if doing an internal determined , use private
   private ClassName() {
   }
   
   
 // ******** Methods *********
    // return-type  methodName (typed-parameter list)   ... methodName should be verb-based
    // return-type can be void, primative, or reference to object/array (eg, classname, etc)
    public void printSum( float x , float y , int n ) {
    if (n<1)
      return ;                                                             // return can stop method (implicit at end) ;
    float sum = x+y ;
    for (int i =0 ; i < n ; i++)
       System.out.println(sum)  ;                                          // ClassName n = new Classname ;
    }                                                                      // m.printSum(8.1 , 9) ;
    // Overloaded version that accepts variable number of params
    public void printSum( float... list ) {                               // variable parameter must be last
       for (int i = 0 ; i < list.length, i++ ) {
          float runsum += i ;
       }
       System.out.prinln(runsum) ;
    }
    public boolean methodName(int arg) {
      int cvar = ovars + ovars2 ;
      return (argument) ;
    }                                                                      // will return a true or false
    
    
   
   
   
   
   } // End of Class definition

// Class Inheritance  of Derived Classes
// Note, any field added here with same name of base class hides base-class field

public class EclassName extends ClassName {

@Override   // compile time only flag to check intent to override method from base class

}

// prevents Inheritence ... sue final
final public class ClassName { ...}
// or , prevent a method ina  class :
public final void mehtodName() {.. }

// require inheritance ... use abstract   (must mark both class and method )
public abstract class ClassName { }
// and, for a method
public abstract type methodName(Type vsr) ;  // thus, now has 

// Note, constructors are not inherited , unless they use super, and are defined in first line of constructor
public ClassName(int var)  {
  super(var)
}




// ********* Using Classes 
// Remember a Class is a Reference Type .. so it only points to an object in memory, and dones not pass a copy, just a pointer
ClassName objectName ;
objectName = new ClassName() ;
// or , on one line:
ClassName objectName = new ClassName() ; 








}





// //////////////////////////////////// Notes on the Object Class  (root of all classes)
// Every class inherits directly or indirectly from the Object class.
public class ClassName extends Object { ... }     // never need to write, but this is what any class does

// so, you can create an Object class any other class:  .. it will actually create the instance.
Object o = new ClassName() ;              // won't be able to reference specialized methods in ClassName
ClassName no = (ClassName) o ;            // will open access to the created object

// Methods of object class
o.clone        // creates duplciate of itslef
o.hashCode     // get a hash code for the current instance
o.getClass     // return type informatio nfor current instance
o.finalize     // handle speical resource cleanup scenarios
o.toString     // return string of characters representing the current instance
o.equals       // compare another object to the current instance for equality



// //////////////////////////////////// Inheritance
use extend keyword
Can override base class methods .. Oject.equals to provide new behaviror 
constructors are not inherited .. but can call into base class constructors with super
extend      keyword to use in class def to create an inherited class
@Override   use to verify base class existance
super       access base class behavior rather than over-ridden behavior
final       do not allow override 
abstract    require override


// //////////////////////////////////// String Class
extends chars to sequence of chars ... immutable object (any change makes new memory allocation)
String myName = "Doug" ;
String lastName = "Schwalm" ;
system.out.println("Full name is " + myName + " " + lastname) ;
strName.length          // gives us number of characters in string
strName.valueOf         // converts nonstring to string        (java will often do this implicitly for base types)
strName.concat          // same as pupper
strName.replace         // creates new string
strName.toLowerCase     // creates new string
strName.toUpperCase     // creates new string
strName.trim            // creates new string
strName.split           // gives array of strings
strName.format          // allows formatting
strName.charAt          //
strName.substring       // extracts a substring
strName.contains        // checks for existance of a substring
strName.endsWith        //
strName.startsWith      //
strName.indexOf         //
strName.lastIndexOf     //
strName.compareTo       // check to see if <=> based on unicode
strName.compareToIgnoreCase //
strName.isEmpty         // zero length string
strName.equals          // exact comparison, char by char (remember == requires both instances to be in same memory)
strName.equalsIgnoreCase  //          if s1.equals(s2))   .. but not this is "expensive" compared to ==.
// http://bit.ly/javastringclass
// Dealing with String equality
String s3 = s1.intern()    // returns a canonnicalized value....returns separate reference ... use for large searches.
String s4 = s2.intern()    //    this iwll point to same object as referenced in s3.   so s3==s4 is True

toString  method in Objectclass often needs to be overridden

@Override
public String toString() {
   if (var1 >0)
      return "Output #" + var1 ;
   else
      return "this Class" + othervar ;
 }
 
 
 StringBuilder       // provides mutable string buffer     (best performance if you presize the buffer
 StringBuilder Sb = new StringBuilder(40) ;      // will grow automatically if to large, but needs overhead
 .append
 .insert
 
 Flight myFlight = new Flight(175) ;
 String location = "Florida" ;
 int time = 9 ;
 sp.append("I flew to ") ;
 sb.append(location) ;
 sb.append(" on ") ;
 sb.append(myFlight) ;              // I flew to Florida on Flight #175
 int pos = sb.length()  - " on ".length - myFlight.toString().length() ;   // tells current used length of the allocation
                                                                         // note, can put .length on a literal
 sb.insert(pos, "at ") ;
 sb.insert(pos+4, time) ;         // I flew to Florida at 9 on Flight #175
String message = sb.toString() ;      // puts it in a string



// ////////////////////////////// Primitive Wrapper Classes      (tradeoff memory for convenience
* adds overhead to a primitive
* allows extra functionality
* all wrapper classes are immutable, just like strings
* Conversions bewteen primitive and wrapper class often handled automatically.
Integer a = 100 ; // value 100 put into wrapper a
int b = a ;       // value taken out of A and put into primitive b










