
########## Typical commands for workign on master branch
new_> nano filename
undo> git checkout -- filename          # will undo any changes that were made, but not staged (and delete changes for ever)

new_>git add filename|glob             # will put it into staging area after editing it
undo>git reset HEAD filename           # will undo changes that have been staged (but not before changes were made..need checkout)

git commit -m "Adding a new thing"

# can reset entire folder or lots of files:
git rest HEAD folder        eg :  git reset HEAD .
git checkout -- folder      eg:   git checkout -- .

# Checking on work:
git log filename                        # find the hash# you want to restore to
git checkout hash# filename             # restore an old version of a file

git status
git diff  (  @@ start_line, number_of_lines_chagned    ;  +added -deleted
git diff -r HEAD path/to/file     # will compare most recent commit with a file


git log
git log path/file
git show HASH#                    # put first 4-8 letters of hash to see details for one entry
git show HEAD~1                   # HEAD is a relative reference for most recent commit hash#
git annotae path/file             # shows details on who made changes when
git show HEAD..HEAD~1             # shows changes beween commites ... any ID1..ID2  will work

#setting up project

.gitignore                        # file can includ *.log or other things to not backup

git clean -n                      # Shows which files are note being tracked
git clean -f                      # Deletes files not being tracked

git config --list 
git config --list --local          #
git config --list --global         #  user.name  and user.email 
git config --list --system         #

git config --global user.name tfwv
git config --global user.email douglas.schwalm.tfwv@statefarm.com

# Branching
git branch                      # shows all the branches in the project
git diff branch1..branch2       # shows differences between branches
git checkout branchname         # switches to the stated branch
git checkout -b newbranch       # creates a new branch , and copies fiels from original

git merge source destination    # merges two branches  
   git add resovled file        # if there were conflicts, fix in nano, then add to staging area
   git commit -m "resoved stuff" # finalize the resolution


git rm filename                 # removes file from stating area?

git init project-name           # creates a directory for yoru repository
git init                        # makes current directory a resository
git clone file:///existing/project   # will clone 

git remote                     # 
git remote -v                  # verbose
git remote add remotename  htmlpath  # assocates remotename with the remote repository

git pull remote branch         # pulls changes from remote to desired branch
     git checkout -- .  # remove all local changes if there are conflicts

git push remote branch        # puts all stuff in branch into remote
  (note, may need to    git pull remote branch  to merge any changes first, then git push )


########## Creating Repositories ##########
#Clone an existing repository
git clone html://site   

# Create a new local repository
git init

git clone file:///usr/home/nand/repl  mypath


########## Local Changes ##########
# Exploration and confirmation commands
git status           # Changed fiels in your working directory
git diff             # lists changes to tracked files

git show

# Staging Area stage
git add .            # add all current changes to the staging area
git add -p <files>   # add some changes in <files> to the staging area

# Commit Stage 
git commit -a        # commit all local changes in tracked files
git commit           # commit previously staged changes
git commit -m "note" # commit previously statged changes with the message on command line
git commit --amend   # Change the last commit (dont amend published commits!)

##########  Commit History #########

git log              # show all commits, starting with newest
git log -p <files>   # show changes over time for specific file
git log hashstart    # show changes related to a specific commit per the first 6-8 characters of the commite hash
git log HEAD..HEAD~2 # show changes related to last through 3rd last commits  (HEAD~1..HEAD~2 , etc)
git blame <file>     # who changed what and when in <file>

########## Branches and Tags ##########

git branch -av         # list all existing branches
git checkout <branch>  # switch HEAD branch
git branch <newbranch> # create new branch based on current HEAD
git checkout --track <remote/branch>   #create new tracking branch based on a remote branch
git branch -d <branch> # delete a local branch
git tag <tagname>      # mark the current commit with a tag

########## Update and Publish ##########

git remote -v              # list all currently configured remotes
git remote show <remote>   # show information about a remote
git remote add <shortname> <url>  # add new remote repository, named <remote>
git fetch <remote>         # download all changes from <remote> but don't integrate into HEAD
git pull <remote> <branch> # download chagnes and directly integrate into HEAD
git push <remote> <branch> # publish local changes on a remote
git branch -dr <remote/branch> # delete a branch on the remote
git push --tags            # Publish your tags

########## Merge and Rebase ##########

git merge <branch>      # merge <branch> into your current HEAD
git rebase <branch>     # rebase your current HEAD onto <branch>  (don't do this!!)
git rebase --abort      # abort a rebase
git rebase --continue   # Continue a rebase after resolving conflicts
git mergetool           # Use your configured merge tool to solve conflicts
git add <resolved-file> # Use yoru editor to manually solve conflicts and, after, mark file as resolved
git rm <resolved-file>  #

########## Undo ##########

git reset --hard HEAD    # Discard all local changes in yoru working directory
git checkout HEAD <file> # Discard local changes in a specific file
git revert <comit>       # Revert a commit (by producing a new commit with contrary changes)
git reset --hard <comit> # Reset your HEAD pointer to a previous commit and discard all changes since then
git reset <commit>       # Reset your HEAD pointer to a previous commit and preserve all chagnes as unstaged changes
git reset --keep <commit># Reset your HEAD pointer to a previous commit and preserve uncommitted local changes


########## SSH Keys ##########
In general, you may need an ssh key on each server you work on.
These are found in the ~/.ssh/  directory
The "public key" will be in id_rsa.pub ... typically it starts with ssh-rsa, and ends with a nickname, like TFWVdm73
*Simply copy the contents of the file (the key), and paste it into the 'Add Key" section in GitLab->UserSettings->SSH Keys
*then, on the server, add the sfgitlab.per.statefarm ssh-rsa key to the known_hosts file

++if it is not there, generate one:
   >ssh-keygen -t rsa -C "TFWVnc74" -b 4096
++ The gitlab key can be obtained by
   >ssh-keyscan sfgitlab.opr.statefarm.org >> known_hosts






