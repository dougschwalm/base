# Common Problems
#   Inconsistent column names ; missing data ; outliers ; duplicate rows ; untidy ; 
#   need to process columns ; colum types signal unexpected values

import pandas as pd
df = pd.read_csv('filename.csv')
df.head()  # methods
df.tail()  
df.info()
df.columns # attributes
df.shape 

df.continent.value_counts(dropna=False)         # same as df['continent'].value_counts(dropna=False)
df.country.value_counts(dropna=False).head()    # returns sorted list ...good for identifing duplicates
df.fertility.value_counts(dropna=False).head()  # can see missing as a value for 5 obs. .. mixed type
df.population.value_counts(dropna=False).head() # can see NaN occurs 42 times

df.describe()        # summary stats, 8 values (count, mean, std, 5-num summary)
print(df['Site Fill'].value_counts(dropna=False))
print(df['Site Fill'].describe())


# histograms
import matplotlib.pyplot as plt
df.population.plot('hist')
plt.show()
df[df.population > 1000000000]  (show all countries with pop greater than billion people 
df.boxplot(column='population', by'continent')

univ-cont:  boxplot-violin-plot, density-histogram
uni-cat:   barchart
bi-cont-cont:  scatter
bi-cont-cat:  boxplot, by
bi-cat-cat:  


# Import matplotlib.pyplot
import matplotlib.pyplot as plt

# Plot the histogram
df['Existing Zoning Sqft'].plot(kind='hist', rot=70, logx=True, logy=True)
df.boxplot(column='initial_cost', by='Borough', rot=90)
# Display the histogram
plt.show()


df.plot(kind='scatter', x='initial_cost', y='total_est_fee', rot=70)



########## Tidy Data   Hadly Wickham, 2014  ... columns=variables, rows=individuals (not fully wide, but not stacked)
# "Every column is a variable, and every row is an observation"

## When columns contain values instead of variables, use pd.melt()
pd.melt(frame=df, id_vars='name' , value_vars=['treatment a','treatment b']
                                   var_name='treatment, value_name='result')         # moves value_vars from wide to long

## When Columns contain variables that should be wide, use pd.pivot
weather_tidy = weather.pivot(index='date', columns='element', values='value')     # index is the id var, columns are the vars to widen

# pivot() method will fail if there are duplicate ids .... in that case, use pivot_table
weather2_tidy = weather.pivot_table(index='date', columns='element', values='value', aggfunc=np.mean )

airquality_pivot = airquality_melt.pivot_table(index=['Month','Day'], columns='measurement', values='reading')

### To fix a hierarchial index, just reset it
print(airquality_pivot.index)                                # Print the index of airquality_pivot
airquality_pivot_reset = airquality_pivot.reset_index()      # Reset the index of airquality_pivot: airquality_pivot_reset
print(airquality_pivot_reset.index                           # Print the new index of airquality_pivot_reset
print(airquality_pivot_reset.head())                         # Print the head of airquality_pivot_reset


### Sometimes variables are convoluted in columns ...eg Male0-14 Male15-24 ... ideally want separate sex and age columns
tb_melt = pd.melt(frame=tb , id_vars=['country','year'])           #melt everything down into a stack
tb_melt['sex'] = tb_melt.variable.str[0]                           # sex is the first character of the word in 'variable'
tb_melt['age_group'] = tb_melt.variable.str[1:]



ebola_melt = pd.melt(ebola, id_vars=['Date', 'Day'], var_name='type_country', value_name='counts')
ebola_melt['str_split'] = ebola_melt.type_country.str.split('_')               # Create the 'str_split' column
ebola_melt['type'] = ebola_melt.str_split.str.get(0)                      # Create the 'type' column
ebola_melt['country'] = ebola_melt.str_split.str.get(1)                 # Create the 'country' column
print(ebola_melt.head())                                                 # Print the head of ebola_melt


########## Combining Data   ##########
# Row-wise (appending ... axis=0 , default)
concat_data = pd.concat([data1, data2])           # note, original indicies will be kept  so concat_dat.loc[0,:] has multiple rows
concat_data = pd.concat([data1, data2] , ignore_index=True)        # resets index label

# Columnwise (joining  ... axis=1)
ebola_tidy = pd.concat([ebola_melt,status_country],axis=1)

### to create very long lists of concatinate objects, use globbing , which will return a list of matches
import glob
csv_files = glob.glob('*.csv')
list_data = []
for filename in csv_files:
    data = pd.read_csv(filename)           # note, to proof, use : peek= pd.read_csv(csv_files[1]) ... peek.head() ,etc
    list_data.append(data)                # list of data frames
pd.concat(list_data)

##### Merging           1:1 , many:1 or 1:many just depend on keys and right/left
pd.merge(left=state_populations, right=state_codes,
         on=None, left_on='state' , right_on='name')          # if common key is named differntly, need to use on=None

# Merge the DataFrames: m2o
m2o = pd.merge(left=site, right=visited,
          on=None, left_on='name' , right_on='site')




